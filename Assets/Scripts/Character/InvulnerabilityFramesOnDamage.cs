using System;
using System.Collections.Generic;
using Licht.Impl.Orchestration;
using Licht.Unity.Objects;
using UnityEngine;

public class InvulnerabilityFramesOnDamage : BaseGameObject
{
    [field: SerializeField]
    public Damageable Damageable { get; private set; }

    [field: SerializeField]
    public float InvulnerabilityDurationInSeconds { get; private set; }

    [field: SerializeField]
    public SpriteRenderer SpriteRenderer { get; private set; }

    protected override void OnEnable()
    {
        base.OnEnable();
        Damageable.OnDamage += Damageable_OnDamage;
    }

    protected override void OnDisable()
    {
        base.OnDisable();
        Damageable.OnDamage -= Damageable_OnDamage;
    }

    private void Damageable_OnDamage(int obj)
    {
        DefaultMachinery.AddUniqueMachine($"invulnerability_frames_{gameObject.GetInstanceID()}",
            UniqueMachine.UniqueMachineBehaviour.Cancel, HandleInvulnerability());
    }

    private IEnumerable<IEnumerable<Action>> HandleInvulnerability()
    {
        Damageable.IsInvulnerable = true;
        yield return TimeYields.WaitOneFrameX;
        DefaultMachinery.AddBasicMachine(Flash());
        yield return TimeYields.WaitSeconds(GameTimer, InvulnerabilityDurationInSeconds);
        Damageable.IsInvulnerable = false;
        yield return TimeYields.WaitOneFrameX;
    }

    private IEnumerable<IEnumerable<Action>> Flash()
    {
        while (Damageable.IsInvulnerable)
        {
            yield return TimeYields.WaitMilliseconds(GameTimer, 50);
            SpriteRenderer.enabled = !SpriteRenderer.enabled;
        }

        SpriteRenderer.enabled = true;
    }
}
